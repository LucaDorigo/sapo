{
  "name": "Sapo",
  "tagline": "Reachability analysis and parameter synthesis for polynomial dynamical systems",
  "body": "## Overview\r\n\r\nSapo is a C++ tool for the formal analysis of discrete-time polynomial dynamical systems.\r\n\r\nThe problems treated by Sapo are:\r\n* Reachability computation, i.e., the calculation of the set of states reachable by the system from a set of initial conditions\r\n* Parameter synthesis, i.e., the refinement of a set of parameters so that the system satisfies a given specification. For reachability analysis Sapo produces a flowpipe that over-approximates the set of states reachable by the system from a set of initial conditions.\r\n\r\nFor parameter synthesis Sapo computes a refinement of the given set of parameters such that the system satisfies a given specification. The specification is formalized as a Signal Temporal Logic (STL) formula.\r\n\r\nIn both cases, the analysis can be done on bounded time.\r\n\r\n### Models\r\n\r\nThe dynamical systems supported by Sapo are discrete-time polynomial dynamical systems, i.e., dynamical systems whose evolutions can be described by difference equations of the form x_{k+1} = f(x_k,p)\r\n\r\nReachability computation can be carried out also on systems without parameters whose dynamics look like x_{k+1} = f(x_k) with f : R^n to R^n polynomial.\r\n\r\n### Set representation\r\n\r\nThe flowpipe representing the reachable set consists in a series of sets. The sets supported by Sapo are:\r\n* Boxes (or hyperrectangles), i.e., n-dimensional rectangles\r\n* Parallelotopes, i.e., n-dimensional parallelograms\r\n* Parallelotopes bundles, i.e., finite sets of parallelotopes whose intersections generate polytopes\r\n\r\nThe parameter synthesis produces a refined set of parameters represented by:\r\n* Polytopes, i.e., n-dimensional polygon\r\n\r\n## Installation\r\n### Prerequisites\r\n\r\nSapo is implemented in C++. Thus, a C++ compiler is required.\r\n\r\nMoreover, Sapo relies on two external libraries:\r\n* GiNaC (GiNaC is Not a CAS), for the symbolic manipulation of polynomials\r\n* GLPK (GNU Linear Programming Kit), for solving linear programming problems\r\n\r\n### Download\r\n\r\nSapo is maintained as a GitHub repository at the address https://github.com/tommasodreossi/sapo.git\r\n\r\nIt can be obtained either by typing the shell command:\r\n\r\n    $ git clone https://github.com/tommasodreossi/sapo.git\r\n\r\nor by downloading the ZIP archive at https://github.com/tommasodreossi/sapo.git\r\n\r\n### Installation\r\n\r\nTo install from the source type:\r\n\r\n    $ make This creates a binary called sapo in /bin\r\n\r\nTo run Sapo, move to /bin and launch the binary with the command:\r\n\r\n    $ ./sapo\r\n\r\n### Visualization\r\n\r\n2D/3D or projections of higher dimensional reachable and parameter sets computed by Sapo can be visualized using the Matlab package plotregion.\r\n\r\n\r\n## Example\r\n\r\n###SIR model\r\n\r\nLet's consider the SIR epidemic that describes the evolution of a disease in a population. The population of individuals is divided in three compartments:\r\n* s, the healthy individuals susceptible to the disease\r\n* i, the infected individuals\r\n* r the individuals removed from the system (e.g., recovered)\r\n\r\nTwo parameters regulate the evolution of the system variables:\r\n* β, the contraction rate\r\n* γ, where 1/γ is the mean infective period.\r\n\r\n∆ is the discretization step.\r\n\r\nThe dynamics of the SIR model are the following:\r\n* s_{k+1} = s_k - (β s_k i_k)∆\r\n* i_{k+1} = i_k + (β s_k i_k - γ i_k)∆\r\n* r_{k+1} = r_k + (γ i_k)∆\r\n\r\n### Reachability\r\n\r\nSapo can be used to compute the bounded time reachable set of the SIR model. For instance, fixing the parameters β = 0.34, γ = 0.05, and ∆ = 0.10, and a set of initial conditions s_0 in [0.79,0.80], i_0 in [0.19,0.20], and r_0 = [0.00,0.00], we can compute the reachable set for 300 steps using a single box as template, or a parallelotope bundle composed by three templates. For more details, check the demo file src/demo_sir_reach.cpp\r\n\r\n### Parameter synthesis\r\n\r\nSapo can also be used to synthesize good parameters. For instance, considering the set of initial conditions s_0 in [0.79,0.80], i_0 in [0.19,0.20], and r_0 = [0.00,0.00], the discretization step ∆ = 0.10, and the initial set of parameters β in [0.18,0.20] and γ in [0.05,0.06], we can ask Sapo to refine the parameters so that the number of infected is always below 0.44 between time 50 and 100. This requirement can be expressed as the STL formula G_{[50,100]}(i \\leq 0.44). For more details, check the demo file src/demo_sir_synth.cpp.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}